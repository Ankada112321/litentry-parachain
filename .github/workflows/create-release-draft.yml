name: Create release draft

on:
  workflow_dispatch:
    inputs:
      release_client:
        type: boolean
        description: client
        required: true
        default: true
      release_runtime:
        type: boolean
        description: runtime
        required: true
        default: true
      release_tag:
        description: an existing tag for creating release (e.g. v1.2.3)
        required: true
      diff_tag:
        description: an existing tag to run diff against (e.g. v1.2.0)
        default: ""
        required: false
      genesis_release:
        type: choice
        description: If any of the genesis artefacts should be released alongside
        options:
          - none
          - litmus
          - rococo
          - litentry

env:
  RELEASE_TAG: ${{ github.event.inputs.release_tag }}
  DIFF_TAG: ${{ github.event.inputs.diff_tag }}
  GENESIS_RELEASE: ${{ github.event.inputs.genesis_release }}
  DOCKER_BUILDKIT: 1

jobs:
  set-release-type:
    runs-on: ubuntu-latest
    steps:
      - name: set release_type
        id: vars
        run: |
          release_type=""
          if [ "${{ github.event.inputs.release_client }}" = "true" ] && [ "${{ github.event.inputs.release_runtime }}" = "true" ]; then
            release_type="both"
          elif [ "${{ github.event.inputs.release_client }}" = "true" ]; then
            release_type="client"
          elif [ "${{ github.event.inputs.release_runtime }}" = "true" ]; then
            release_type="runtime"
          else
            echo "::error::Please select at least one release type."
            exit 1
          fi
          echo "release_type=${release_type}" >> $GITHUB_OUTPUT
    outputs:
      release_type: ${{ steps.vars.outputs.release_type }}

  ## build runtime wasm ##
  build-wasm:
    if: ${{ github.event.inputs.release_runtime == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chain:
          - litmus
          - rococo
          - litentry
    steps:
      - name: Checkout codes on ${{ env.RELEASE_TAG }}
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_TAG }}
          fetch-depth: 0

      - name: Build with srtool
        id: srtool_build
        uses: chevdor/srtool-actions@v0.5.0
        env:
          # optional: will override the parachain pallet ID and authorize_upgrade call ID,
          #           which will result in a different parachain_authorize_upgrade_hash
          PARACHAIN_PALLET_ID: "0x1e"
          AUTHORIZE_UPGRADE_PREFIX: "0x02"
        with:
          chain: ${{ matrix.chain }}-parachain
          runtime_dir: runtime/${{ matrix.chain }}

      - name: Summary
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq . > ${{ matrix.chain }}-parachain-srtool-digest.json
          echo "==============================================="
          cat ${{ matrix.chain }}-parachain-srtool-digest.json
          cp ${{ steps.srtool_build.outputs.wasm_compressed }} ${{ matrix.chain }}-parachain-runtime.compact.compressed.wasm

      - name: Upload wasm artefacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.chain }}-parachain-runtime
          path: |
            ${{ matrix.chain }}-parachain-srtool-digest.json
            ${{ matrix.chain }}-parachain-runtime.compact.compressed.wasm

  ## build docker image of client binary ##
  build-docker:
    if: ${{ github.event.inputs.release_client == 'true' }}
    runs-on: self-hosted
    steps:
      - name: Checkout codes on ${{ env.RELEASE_TAG }}
        run: echo "build-docker placeholder"

  ## test again the built docker image ##
  run-ts-tests:
    runs-on: ubuntu-latest
    needs: build-docker
    strategy:
      matrix:
        chain:
          - litmus
          - litentry
    steps:
      - name: Checkout codes
        run: echo "run-ts-tests placeholder"

  ## create the release draft ##
  create-release-draft:
    runs-on: ubuntu-latest
    # see https://github.com/actions/runner/issues/491
    # seems to be the only way to achieve this
    needs:
      - build-wasm
      - run-ts-tests
      - set-release-type
    if: |
      !failure() && !cancelled() &&
      (success('build-wasm') || success('run-ts-tests'))
    steps:
      - name: Checkout codes on ${{ env.RELEASE_TAG }}
        run: echo "release-draft-placeholder"

  ## update the image version at onfinality ##
  update-onfinality-image:
    # if: ${{ github.event.inputs.release_client == 'true' }}
    runs-on: ubuntu-latest
    needs: create-release-draft
    steps:
      - name: Update litmus image version
        run: echo "update-onfinality-image placeholder"